function Test-ASREPAttackVulnerability {
    [CmdletBinding()]
    param(
        [Hashtable]$settings
    )

    $result = @{
        ItemNumber = "ADS012"
        UseCase = "Accounts vulnerable to ASREP attack"
        WeightedScore = 5
        TechnicalInformation = "Kerberoast is an attack method used to exploit service tickets in Kerberos authentication. The ASREP (Authentication Server Response) component of Kerberoast involves targeting and extracting service tickets for accounts that do not have pre-authentication enabled. Attackers use this technique to obtain and crack these tickets to retrieve plaintext passwords for service accounts. 

Checking for Kerberoast-ASREP vulnerabilities involves identifying accounts that do not require pre-authentication, which can be exploited to perform this attack."
        Category = "Authentication & Permission Policies"
        TechnicalDetails = $null # will fulfill later 
        RemedediationSolution = "
    All accounts must have Kerberos Pre-Authentication enabled (Enabled by Default).
    Disable RC4 cipher if possible."
        MITREMapping = "[MITRE] T1558: Steal or Forge Kerberos Tickets"
        Status = $null
        ErrorMsg = $null 
    }

    try {
        $users = Get-ADUser -Server $settings.'domainController.name' -Filter * -Properties UserAccountControl

        $vulnerableAccounts = @()

        foreach ($user in $users) {
            if ($user.UserAccountControl -band 0x400000) {
                $vulnerableAccounts += @{
                    SamAccountName = $user.SamAccountName
                    DistinguishedName = $user.DistinguishedName
                }
            }
        }

        if ($vulnerableAccounts.Count -gt 0) {
            $result.Status = "Fail"
            $result.TechnicalDetails = "Pre-authentication is disabled for $($vulnerableAccounts.Count) account(s):`n" + ($vulnerableAccounts | ConvertTo-Json -Compress)
        } else {
            $result.Status = "Pass"
            $result.TechnicalDetails = "Pass: No accounts with pre-authentication disabled found."
        }

    } catch {
        $result.Status = "Error"
        $result.ErrorMsg = $_.Exception.Message
    }

    return $result
}

$settings = @{
    'domainController.name' = $args[0]
    'domainController.forest' = $args[1]
}

$result = Test-ASREPAttackVulnerability -settings $settings
Write-Output $result | ConvertTo-Json -Depth 10